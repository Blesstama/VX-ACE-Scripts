#==============================================================================
# â–¼ Blesstama - Before/After Evals v0.01
# -----------------------------------------------------------------------------
# Actor/Class/Item/Skill/Weapon/Enemy/State Notetags:
# These notetags go in the X notebox in the database.
# -----------------------------------------------------------------------------
# <Before Eval>
#    COMMAND
# </Before Eval>
# <After Eval>
#    COMMAND
# </After Eval>
# using this note makes anything inside it trigger command
# after item has did own thing where the COMMAND is any valid ruby thing.
# You can use the following variables in your command:
#     user - the current enemy/actor
#     self/b - target against who was used skill/item
#     item - skill/item that was used
#     p - game party
#     t - game troop
#     v - game variables (v[10] for variable 10)
#     s - game switches (s[15] for switch[15])
#
# le examples:
# <Before Eval>
# return if !self.result.hit?
# user.hp += 100
# </Before Eval>

# user of skill will restores 100 hp if his action was successful
#(no evasion, no misses and no counters)

# <After Eval>
# if user != self
#   drain = self.mp >= 100 ? 100 : self.mp
#   user.mp += drain
#   self.mp -= 100
# end
# </After Eval>
#
# user of skill will drain 100 mp from target as long as he has on
#(if less than 100 mp then drain what left)
# <Before Eval>
# if item.repeats >= 3
#  user.tp += 2
# else
#  user.tp += 5
# end
# </Before Eval>
# if currently used item has more or equal 3, give 2 tp per it, else 5
# -----------------------------------------------------------------------------
class Game_Enemy < Game_Battler
  def note
    enemy.note.to_s
  end

  def get_all_notes(*args)
    notes = ""
    notes += note unless args.include?(:self)
    states.compact.each { |state| notes += state.note } unless args.include?(:state)
    notes
  end
end

class Game_Actor < Game_Battler
  def note
    actor.note.to_s
  end

  def get_all_notes(*args)
    notes = ""
    notes += note unless args.include?(:self)
    notes += self.class.note unless args.include?(:class)
    equips.compact.each { |equip| notes += equip.note } unless args.include?(:equip)
    states.compact.each { |state| notes += state.note } unless args.include?(:state)
    notes
  end
end

class Game_Battler < Game_BattlerBase
  alias itemsapplied item_apply
  alias damageapplied execute_damage
  
  def item_apply(user, item)
    preitemapply(user, item)
    itemsapplied(user, item)
    postitemapply(user, item)
  end
  
  def preitemapply(user, item)
    regexp = /<Before Eval>(.*?)<\/Before Eval>/im
    item.note.scan(regexp).each do |code|
      eval_command(user, item, code.first)
    end
    user.get_all_notes.scan(regexp).each do |code|
      eval_command(user, item, code.first)
    end
  end
  
  def postitemapply(user, item)
    regexp = /<After Eval>(.*?)<\/After Eval>/im
    item.note.scan(regexp).each do |code|
      eval_command(user, item, code.first)
    end
    user.get_all_notes.scan(regexp).each do |code|
      eval_command(user, item, code.first)
    end
  end
  

  def eval_command(user, item, formula, b=self, p=$game_party, s=$game_switches, t=$game_troop, v=$game_variables)
    #puts "Evaluating Command: #{formula}"
    eval(formula)
  rescue Exception => e
    puts "Error in Before/After Eval: #{e.message}"
  end

end
