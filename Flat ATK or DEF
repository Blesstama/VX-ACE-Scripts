#==============================================================================
# 
# ▼ Blesstama - ATK/REC/DEF/CRIT bonuses v0.02
# -- Last Updated: 06.02.2024
# -- Level: Easy
# -- Requires: n/a
#============================================================================== 
#==============================================================================
# ▼ Introduction
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# This script allows to make flat bonuses to damage either throught
# flat influence or only while crit trigger, same for defense:
# flat damage reduction always or when guarding
# 
#==============================================================================
# ▼ Instructions
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# To install this script, open up your script editor and copy/paste this script
# to an open slot below ▼ Materials/素材 but above ▼ Main. Remember to save.
# 
# -----------------------------------------------------------------------------
# Actor/Class/Weapon/Armor/State Notetags - These notetags go in the X notebox in the database.
# -----------------------------------------------------------------------------
# <atk flat: +(-)x>
# adds flat damage to any damage skills (goes before any other calculations)
#
# <atk crit flat: +(-)x>
# adds flat damage to any damage skills (goes after any other calculations)
#
# <def flat: +(-)x>
# adds flat damage reduction while taking damage 
# (goes after calculating flat atk bonus)
#
# <heal HP flat: +(-)x>
# adds flat increase to any heal skills (goes before any other calculations)
#
# <heal MP flat: +(-)x>
# adds flat increase to any heal skills (goes before any other calculations)
#
# <heal HP self flat: +(-)x>
# adds flat increase to any heal user receive (goes before any other calculations)
#
# <heal MP self flat: +(-)x>
# adds flat increase to any heal user receive (goes before any other calculations)
# 
# <def guard flat: +(-)x>
# adds flat damage reduction while guarding
# (goes after applying grd effect)
#
# <crit multipler: +(-)x>
# increase/decrease crit multipler by said number
#
#==============================================================================
# ▼ Editting anything past this point may potentially result in causing
# computer damage, incontinence, explosion of user's head, coma, death, and/or
# halitosis so edit at your own risk.
#==============================================================================

module BLESS
  module REGEXP
  module BASEITEM
    
    ATK_FLAT = /<(?:ATK_FLAT|atk flat):[ ]([\+\-]\d+)>/i
    HEAL_HP_FLAT = /<(?:HEAL_HP_FLA|heal hp flat):[ ]([\+\-]\d+)>/i
    HEAL_SP_FLAT = /<(?:HEAL_MP_FLA|heal mp flat):[ ]([\+\-]\d+)>/i
    HEAL_HP_SELF_FLAT = /<(?:HEAL_HP_SELF_FLAT|heal hp self flat):[ ]([\+\-]\d+)>/i
    HEAL_SP_SELF_FLAT = /<(?:HEAL_SP_SELF_FLAT|heal sp self flat):[ ]([\+\-]\d+)>/i
    ATK_CRIT_FLAT = /<(?:ATK_CRIT_FLAT|atk crit flat):[ ]([\+\-]\d+)>/i
    DEF_FLAT = /<(?:DEF_FLAT|def flat):[ ]([\+\-]\d+)>/i
    DEF_GUARD_FLAT = /<(?:DEF_GUARD_FLAT|def guard flat):[ ]([\+\-]\d+)>/i
    CRIT_MULTIPLER = /<(?:CRIT_MULTIPLER|crit multipler):[ ]([\+\-]?\d+(\.\d+)?)>/i;
    
  end # BASEITEM
  end # REGEXP
end # YEA

module DataManager
  
  #--------------------------------------------------------------------------
  # alias method: load_database
  #--------------------------------------------------------------------------
  class <<self; alias load_database_bsl load_database; end
  def self.load_database
    load_database_bsl
    load_notetags_bsl
  end
  
  #--------------------------------------------------------------------------
  # new method: load_notetags_bsl
  #--------------------------------------------------------------------------
  def self.load_notetags_bsl
    groups = [$data_actors, $data_classes, $data_skills, $data_weapons,
      $data_armors, $data_enemies, $data_states]
    for group in groups
      for obj in group
        next if obj.nil?
        obj.load_notetags_bsl
      end
    end
  end
  
end # DataManager

#==============================================================================
# ■ RPG::BaseItem
#==============================================================================

class RPG::BaseItem
  
  #--------------------------------------------------------------------------
  # public instance variables
  #--------------------------------------------------------------------------
  attr_accessor :atk_flat
  attr_accessor :heal_hp_flat
  attr_accessor :heal_sp_flat
  attr_accessor :heal_hp_self_flat
  attr_accessor :heal_sp_self_flat
  attr_accessor :atk_crit_flat
  attr_accessor :def_flat
  attr_accessor :def_guard_flat
  attr_accessor :crit_multipler
  
  #--------------------------------------------------------------------------
  # common cache: load_notetags_scm
  #--------------------------------------------------------------------------
  def load_notetags_bsl
    @atk_flat = 0
    @heal_hp_flat = 0
    @heal_sp_flat = 0
    @heal_hp_self_flat = 0
    @heal_sp_self_flat = 0
    @atk_crit_flat = 0
    @def_flat = 0
    @def_guard_flat = 0
    @crit_multipler = 0
    #---
    self.note.split(/[\r\n]+/).each { |line|
      case line
      #---
      when BLESS::REGEXP::BASEITEM::ATK_FLAT
        @atk_flat = $1.to_i
      when BLESS::REGEXP::BASEITEM::HEAL_HP_FLAT
        @heal_hp_flat = $1.to_i
      when BLESS::REGEXP::BASEITEM::HEAL_SP_FLAT
        @heal_sp_flat = $1.to_i
      when BLESS::REGEXP::BASEITEM::HEAL_HP_SELF_FLAT
        @heal_hp_self_flat = $1.to_i
      when BLESS::REGEXP::BASEITEM::HEAL_SP_SELF_FLAT
        @heal_sp_self_flat = $1.to_i
      when BLESS::REGEXP::BASEITEM::ATK_CRIT_FLAT
        @atk_crit_flat = $1.to_i
      when BLESS::REGEXP::BASEITEM::DEF_FLAT
        @def_flat = $1.to_i
      when BLESS::REGEXP::BASEITEM::DEF_GUARD_FLAT
        @def_guard_flat = $1.to_i
      when BLESS::REGEXP::BASEITEM::CRIT_MULTIPLER
        @crit_multipler = $1.to_f
      #---
      end
    } # self.note.split
    #---
  end
  
end # RPG::BaseItem

#==============================================================================
# ■ Game_BattlerBase
#==============================================================================

class Game_BattlerBase
  
  #--------------------------------------------------------------------------
  # new method: atkf
  #--------------------------------------------------------------------------
  def atkf
    n = 0
    if actor?
      n += self.actor.atk_flat
      n += self.class.atk_flat
      equips.compact.each { |equip| n += equip.atk_flat }
    else
      n += self.enemy.atk_flat
      n += self.class.atk_flat if $imported["YEA-Doppelganger"] && !self.class.nil?
    end
    states.compact.each { |state| n += state.atk_flat }
    return n
  end
  #--------------------------------------------------------------------------
  # new method: rechf
  #--------------------------------------------------------------------------
  def rechf
    n = 0
    if actor?
      n += self.actor.heal_hp_flat
      n += self.class.heal_hp_flat
      equips.compact.each { |equip| n += equip.heal_hp_flat }
    else
      n += self.enemy.heal_hp_flat
      n += self.class.heal_hp_flat if $imported["YEA-Doppelganger"] && !self.class.nil?
    end
    states.compact.each { |state| n += state.heal_hp_flat }
    return n
  end
  #--------------------------------------------------------------------------
  # new method: recsf
  #--------------------------------------------------------------------------
  def recsf
    n = 0
    if actor?
      n += self.actor.heal_sp_flat
      n += self.class.heal_sp_flat
      equips.compact.each { |equip| n += equip.heal_sp_flat }
    else
      n += self.enemy.heal_sp_flat
      n += self.class.heal_sp_flat if $imported["YEA-Doppelganger"] && !self.class.nil?
    end
    states.compact.each { |state| n += state.heal_sp_flat }
    return n
  end
  #--------------------------------------------------------------------------
  # new method: recf
  #--------------------------------------------------------------------------
  def recsh
    n = 0
    if actor?
      n += self.actor.heal_hp_self_flat
      n += self.class.heal_hp_self_flat
      equips.compact.each { |equip| n += equip.heal_hp_self_flat }
    else
      n += self.enemy.heal_hp_self_flat
      n += self.class.heal_hp_self_flat if $imported["YEA-Doppelganger"] && !self.class.nil?
    end
    states.compact.each { |state| n += state.heal_hp_self_flat }
    return n
  end
  #--------------------------------------------------------------------------
  # new method: recf
  #--------------------------------------------------------------------------
  def recss
    n = 0
    if actor?
      n += self.actor.heal_sp_self_flat
      n += self.class.heal_sp_self_flat
      equips.compact.each { |equip| n += equip.heal_sp_self_flat }
    else
      n += self.enemy.heal_sp_self_flat
      n += self.class.heal_sp_self_flat if $imported["YEA-Doppelganger"] && !self.class.nil?
    end
    states.compact.each { |state| n += state.heal_sp_self_flat }
    return n
  end
  #--------------------------------------------------------------------------
  # new method: atkfc
  #--------------------------------------------------------------------------
  def atkfc
    n = 0
    if actor?
      n += self.actor.atk_crit_flat
      n += self.class.atk_crit_flat
      equips.compact.each { |equip| n += equip.atk_crit_flat }
    else
      n += self.enemy.atk_crit_flat
      n += self.class.atk_crit_flat if $imported["YEA-Doppelganger"] && !self.class.nil?
    end
    states.compact.each { |state| n += state.atk_crit_flat }
    return n
  end
  #--------------------------------------------------------------------------
  # new method: deff
  #--------------------------------------------------------------------------
  def deff
    n = 0
    if actor?
      n += self.actor.def_flat
      n += self.class.def_flat
      equips.compact.each { |equip| n += equip.def_flat }
    else
      n += self.enemy.def_flat
      n += self.class.def_flat if $imported["YEA-Doppelganger"] && !self.class.nil?
    end
    states.compact.each { |state| n += state.def_flat }
    return n
  end
  #--------------------------------------------------------------------------
  # new method: deffg
  #--------------------------------------------------------------------------
  def deffg
    n = 0
    if actor?
      n += self.actor.def_guard_flat
      n += self.class.def_guard_flat
      equips.compact.each { |equip| n += equip.def_guard_flat }
    else
      n += self.enemy.def_guard_flat
      n += self.class.def_guard_flat if $imported["YEA-Doppelganger"] && !self.class.nil?
    end
    states.compact.each { |state| n += state.def_guard_flat }
    return n
  end
  #--------------------------------------------------------------------------
  # new method: critm
  #--------------------------------------------------------------------------
  def critm
    n = 0
    if actor?
      n += self.actor.crit_multipler
      n += self.class.crit_multipler
      equips.compact.each { |equip| n += equip.crit_multipler }
    else
      n += self.enemy.crit_multipler
      n += self.class.crit_multipler if $imported["YEA-Doppelganger"] && !self.class.nil?
    end
    states.compact.each { |state| n += state.crit_multipler }
    n
    return n
  end
  
end # Game_BattlerBase

#==============================================================================
# 
# ▼ Overwriting how damage works + same for guard
# 
#==============================================================================
class Game_Battler < Game_BattlerBase
  def make_damage_value(user, item)
    value = item.damage.eval(user, self, $game_variables)
    value += user.atkf if (user.actor? != self.actor?) # flat atk increase
    value -= self.deff if (user.actor? != self.actor?) # flat def decrease
    value *= item_element_rate(user, item)
    value *= pdr if item.physical?
    value *= mdr if item.magical?
    if item.damage.recover? # the heal part
      if item.damage.to_hp? # the heal flat addon hp
        value -= user.rechf
        value -= self.recsh
      end
      if item.damage.to_mp? # the heal flat addon sp
       value -= user.recsf
       value -= self.recss
      end
      value *= rec
    end
    #the heal part over
    @result.critical = true if self.state?(6) == true
    value = apply_critical(user, value) if @result.critical == true
    value = apply_variance(value, item.damage.variance)
    apply_guard(user, value) if guard?
    @result.make_damage(value.to_i, item)
  end
  #--------------------------------------------------------------------------
  # * Apply Critical
  #--------------------------------------------------------------------------
  def apply_critical(user, damage)
    value2 = 2
    value2 += user.critm #crit fat multipler
    damage *= value2
    damage += user.atkfc if (user.actor? != self.actor?) # crit flat damage
  end
  #--------------------------------------------------------------------------
  # * Applying Guard Adjustment
  #--------------------------------------------------------------------------
  def apply_guard(user, damage)
    damage /= (2 * grd)
    damage += user.atkfc if (user.actor? != self.actor?) # flat def guard reduction
  end
  #--------------------------------------------------------------------------
  # * [HP Recovery] Effect
  #--------------------------------------------------------------------------
  def item_effect_recover_hp(user, item, effect)
    value = (mhp * effect.value1 + effect.value2)
    value += user.rechf
    value += self.recsh
    value *= rec
    value *= user.pha if item.is_a?(RPG::Item)
    value = value.to_i
    @result.hp_damage -= value
    @result.success = true
    self.hp += value
  end
  #--------------------------------------------------------------------------
  # * [MP Recovery] Effect
  #--------------------------------------------------------------------------
  def item_effect_recover_mp(user, item, effect)
    value = (mmp * effect.value1 + effect.value2) 
    value -= user.recsf
    value -= self.recss
    value *= rec
    value *= user.pha if item.is_a?(RPG::Item)
    value = value.to_i
    @result.mp_damage -= value
    @result.success = true if value != 0
    self.mp += value
  end
end
#==============================================================================
# 
# ▼ End of File
# 
#==============================================================================
