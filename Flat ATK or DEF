#==============================================================================
# 
# ▼ Blesstama - ATK/REC/DEF/CRIT bonuses v0.02
# -- Last Updated: 06.02.2024
# -- Level: Easy
# -- Requires: n/a
#============================================================================== 
#==============================================================================
# ▼ Introduction
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# This script allows to make flat bonuses to damage either throught
# flat influence or only while crit trigger, same for defense:
# flat damage reduction always or when guarding
# 
#==============================================================================
# ▼ Instructions
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# To install this script, open up your script editor and copy/paste this script
# to an open slot below ▼ Materials/素材 but above ▼ Main. Remember to save.
# 
# -----------------------------------------------------------------------------
# Actor/Class/Weapon/Armor/State Notetags - These notetags go in the X notebox in the database.
# -----------------------------------------------------------------------------
# <atk flat: FORMULA>
# adds flat damage to any damage skills (goes before any other calculations)
#
# <atk crit flat: FORMULA>
# adds flat damage to any damage skills (goes after any other calculations)
#
# <def flat: FORMULA>
# adds flat damage reduction while taking damage 
# (goes after calculating flat atk bonus)
#
# <heal HP flat: FORMULA>
# adds flat increase to any heal skills (goes before any other calculations)
#
# <heal MP flat: FORMULA>
# adds flat increase to any heal skills (goes before any other calculations)
#
# <heal HP self flat: FORMULA>
# adds flat increase to any heal user receive (goes before any other calculations)
#
# <heal MP self flat: FORMULA>
# adds flat increase to any heal user receive (goes before any other calculations)
# 
# <def guard flat: FORMULA>
# adds flat damage reduction while guarding (goes after applying grd effect)
#
# <crit multipler: FORMULA>
# increase/decrease crit multipler by said number
#
# <hp regen flat: FORMULA>
# recover hp in end of turn by flat number
#
# <mp regen flat: FORMULA>
# recover mp in end of turn by flat number
#
# <tp regen flat: FORMULA>
# recover mp in end of turn by flat number
#
# <atk flat: FORMULA>
# <atk crit flat: FORMULA>
# <def flat: FORMULA>
# <heal HP flat: FORMULA>
# <heal MP flat: FORMULA>
# <heal HP self flat: FORMULA>
# <heal MP self flat: FORMULA>
# <def guard flat: FORMULA>
# <crit multipler: FORMULA>
# <hp regen flat: FORMULA>
# <mp regen flat: FORMULA>
# <tp regen flat: FORMULA>
#
# Where the FORMULA is any valid ruby formula that returns a number.
# You can use the following variables in your formula:
#     a - the current enemy/actor
#     p - game party
#     t - game troop
#     v - game variables
#     s - game switches
#
#
#==============================================================================
# ▼ Editting anything past this point may potentially result in causing
# computer damage, incontinence, explosion of user's head, coma, death, and/or
# halitosis so edit at your own risk.
#==============================================================================

#==============================================================================
# ■ Game_BattlerBase
#==============================================================================

class Game_Enemy < Game_Battler
  def note
    enemy ? enemy.note : ""
  end

  def get_all_notes(*args)
    notes = ""
    notes += note if !args.include?(:self)
    states.compact.each {|state| notes += state.note } if !args.include?(:state)
    notes
  end
end

class Game_Actor < Game_Battler
  def note
    actor ? actor.note : ""
  end

  def get_all_notes(*args)
    notes = ""
    notes += note if !args.include?(:self)
    notes += self.class.note if !args.include?(:class)
    equips.compact.each {|equip| notes += equip.note } if !args.include?(:equip)
    states.compact.each {|state| notes += state.note } if !args.include?(:state)
    notes
  end
end

class Game_BattlerBase
  def get_flat_value(regex)
    regexp = Regexp.new(regex, Regexp::IGNORECASE)
    array = get_all_notes.scan(regexp).collect { |match| eval_formula(match.first) }
    return array.sum(&:to_i)
  end

  FLAT_VALUES = {
    atkf: "<(?:ATK_FLAT|atk flat): (.*?)>",
    rechf: "<(?:HEAL_HP_FLAT|heal hp flat):(.*?)>",
    recsf: "<(?:HEAL_MP_FLAT|heal mp flat):(.*?)>",
    recsh: "<(?:HEAL_HP_SELF_FLAT|heal hp self flat):(.*?)>",
    recss: "<(?:HEAL_MP_SELF_FLAT|heal mp self flat):(.*?)>",
    atkfc: "<(?:ATK_CRIT_FLAT|atk crit flat):(.*?)>",
    deff: "<(?:DEF_FLAT|def flat):(.*?)>",
    deffg: "<(?:DEF_GUARD_FLAT|def guard flat):(.*?)>",
    critm: "<(?:CRIT_MULTIPLER|crit multipler):(.*?)>",
    hrgf: "<(?:HP_REGEN_FLAT|hp regen flat):(.*?)>",
    mrgf: "<(?:MP_REGEN_FLAT|mp regen flat):(.*?)>",
    trgf: "<(?:TP_REGEN_FLAT|tp regen flat):(.*?)>"
  }

  FLAT_VALUES.each do |method_name, regex|
    define_method(method_name) do
      get_flat_value(regex)
    end
  end

  def eval_formula(formula, p=$game_party, s=$game_switches, t=$game_troop, v=$game_variables)
    eval(formula)
  end
end

#==============================================================================
# 
# ▼ Overwriting how damage works + same for guard
# 
#==============================================================================
class Game_Battler < Game_BattlerBase
  def make_damage_value(user, item)
    puts "flat atk: #{user.atkf}, atk crit flat: #{user.atkfc}, crit multipler: #{user.critm}"
    puts "heal hp flat: #{user.rechf}, heal hp flat self: #{user.recsh}, def flat guard: #{user.deffg}"
    puts "heal mp flat: #{user.recsf}, heal mp flat self: #{user.recss}, def flat: #{user.deff}"
    puts "hp flat regen: #{user.hrgf}, mp flat regen: #{user.mrgf}, tp flat regen: #{user.trgf}"
    value = item.damage.eval(user, self, $game_variables)
    value += user.atkf if (user.actor? != self.actor?) # flat atk increase
    value -= self.deff if (user.actor? != self.actor?) # flat def decrease
    value *= item_element_rate(user, item)
    value *= pdr if item.physical?
    value *= mdr if item.magical?
    if item.damage.recover? # the heal part
      if item.damage.to_hp? # the heal flat addon hp
        value -= user.rechf
        value -= self.recsh
      end
      if item.damage.to_mp? # the heal flat addon sp
       value -= user.recsf
       value -= self.recss
      end
      value *= rec
    end
    #the heal part over
    critical_effects(user, item) if @result.critical
    value = apply_critical(user, value) if @result.critical
    value = apply_variance(value, item.damage.variance)
    apply_guard(user, value) if guard?
    @result.make_damage(value.to_i, item)
  end
  #--------------------------------------------------------------------------
  # * Apply Critical
  #--------------------------------------------------------------------------
  def apply_critical(user, damage)
    value2 = 2
    value2 += user.critm #crit fat multipler
    damage *= value2
    damage += user.atkfc if (user.actor? != self.actor?) # crit flat damage
  end
  #--------------------------------------------------------------------------
  # * Applying Guard Adjustment
  #--------------------------------------------------------------------------
  def apply_guard(user, damage)
    damage /= (2 * grd)
    damage -= user.deffg if (user.actor? != self.actor?) # flat def guard reduction
  end
  #--------------------------------------------------------------------------
  # * [HP Recovery] Effect
  #--------------------------------------------------------------------------
  def item_effect_recover_hp(user, item, effect)
    value = (mhp * effect.value1 + effect.value2)
    value += user.rechf
    value += self.recsh
    value *= rec
    value *= user.pha if item.is_a?(RPG::Item)
    value = value.to_i
    @result.hp_damage -= value
    @result.success = true
    self.hp += value
  end
  #--------------------------------------------------------------------------
  # * [MP Recovery] Effect
  #--------------------------------------------------------------------------
  def item_effect_recover_mp(user, item, effect)
    value = (mmp * effect.value1 + effect.value2)
    puts "#{value}"
    value += user.recsf

    value += self.recss
    value *= rec
    value *= user.pha if item.is_a?(RPG::Item)
    value = value.to_i
    @result.mp_damage -= value
    @result.success = true if value != 0
    self.mp += value
  end
  #--------------------------------------------------------------------------
  # * HP Regeneration
  #--------------------------------------------------------------------------
  def regenerate_hp
    damage = -(mhp * hrg * rec).to_i
    damage -= hrgf
    perform_map_damage_effect if $game_party.in_battle && damage > 0
    @result.hp_damage = [damage, max_slip_damage].min
    self.hp -= @result.hp_damage
  end
  #--------------------------------------------------------------------------
  # * MP Regeneration
  #--------------------------------------------------------------------------
  def regenerate_mp
    @result.mp_damage = -(mmp * mrg * rec).to_i
    @result.mp_damage -= mrgf
    self.mp -= @result.mp_damage
  end
  #--------------------------------------------------------------------------
  # * TP Regeneration
  #--------------------------------------------------------------------------
  def regenerate_tp
    tprg = 100 * trg
    tprg += trgf
    tprg *= tcr
    self.tp += tprg
  end
end
#==============================================================================
# 
# ▼ End of File
# 
#==============================================================================
