#===============================================================================
# 
# Craze's Script Asylum - Gold/EXP Boost
# Blesstama Add-On: Item Boost + Flat increases + Amount of Items
# Last Date Updated: 2010.05.25
# Level: Easy
# 
# Allow certain states and pieces of equipment to raise the amount of gold
# and experience that enemies grant. Similar to KGC's version, but expanded
# and definitely compatible with Battle Engine Zealous.
#===============================================================================
# Instructions
# -----------------------------------------------------------------------------
# To install this script, open up your script editor and copy/paste this script
# to an open slot below ▼ Materials but above ▼ Main. Remember to save.
# 
# <gold bonus: x%> 
# For equipment and states. Alters the amount of gold dropped by enemies
# after battle by x%. Multiplicative.
#
# <exp bonus: x%> 
# For equipment and states. Alters the amount of experience earned from enemies
# after battle by x%. Multiplicative.
#
# <item bonus: x%> 
# For equipment and states. Alters the chance you egt items from enemies
# after battle by x%. Multiplicative.
#
# <gold flat bonus: x%> 
# For equipment and states. Alters the amount of gold dropped by enemies
# after battle by x%. Flat Increase.
#
# <exp flat bonus: x%> 
# For equipment and states. Alters the amount of experience earned from enemies
# after battle by x%. Flat Increase.
#
# <item flat bonus: x%> 
# For equipment and states. Alters the chance you egt items from enemies
# after battle by x%. Flat Increase.
#
# <extra Bonus Drop: +-x>
# extra replace by Item/Weapon/Armor
# For equipment and states. When you are supposed to get item from
# related category, gives you +- x (if lower or equal 0 then removes drop)
#
# Note that these states will do nothing if inflicted on enemies! If somebody
# would like that for some reason, I would be willing to make that work, but
# for now I don't see the point.
# 
#===============================================================================
# Examples
# -----------------------------------------------------------------------------
# <gold bonus: 125%>  
# The equipment would cause *25% more gold to be found after battle.
# 
# <exp bonus: 90%> 
# Enemies would grant *10% less of their normal EXP earnings.
#
# <item bonus: 90%> 
# Enemies would grant *10% less of their normal Items earnings.
#
# <gold flat bonus: 125%>  
# The equipment would cause +25% more gold to be found after battle.
# 
# <exp flat bonus: 90%> 
# Enemies would grant -10% less of their normal EXP earnings.
#
# <item flat bonus: 90%> 
# Enemies would have -10% less chance to drop item.
#
# <Item Bonus Drop: +1> 
# Enemies would give 1 more items than usually.
#
# <Weapon Bonus Drop: -1>
# Enemies gives 1 less weapons (or none if it's lowered to 0)
# 
# This is for equipment and state noteboxes only.
#===============================================================================
# Compatibility
# -----------------------------------------------------------------------------
# There should be no compatibity issues. Works with Melody's Victory Aftermath.
# Just to be safe, place this script under any that modify the amount of gold
# and experience a monster hands out.
#===============================================================================
 
$imported = {} if $imported == nil
$imported["GoldEXPBoost"] = true


 
#==============================================================================
# RPG::BaseItem
#==============================================================================
 
class RPG::BaseItem
 
  #--------------------------------------------------------------------------
  # goldboosts 
  #--------------------------------------------------------------------------

  def goldboosts
    return @gboosts if @gboosts != nil
    @gboosts = []
    self.note.split(/[\r\n]+/).each { |line|
      case line
      when /<(?:GOLD_BONUS|gold bonus):[ ]*(\d+)([%％])>/i
          @gboosts.push($1.to_i)
      end
    }
    return @gboosts
  end
 
  #--------------------------------------------------------------------------
  # xpboosts 
  #--------------------------------------------------------------------------

  def xpboosts
    return @xboosts if @xboosts != nil
    @xboosts = []
    self.note.split(/[\r\n]+/).each { |line|
      case line
      when /<(?:EXP_BONUS|exp bonus|XP_BONUS|xp bonus):[ ]*(\d+)([%％])>/i
          @xboosts.push($1.to_i)
      end
    }
    return @xboosts
  end

  #--------------------------------------------------------------------------
  # itemboosts 
  #--------------------------------------------------------------------------

  def itemboosts
    return @iboosts if @iboosts != nil
    @iboosts = []
    self.note.split(/[\r\n]+/).each { |line|
      case line
      when /<(?:ITEM_BONUS|item bonus|ITEM_BONUS|item bonus):[ ]*(\d+)([%％])>/i
          @iboosts.push($1.to_i)
      end
    }
    return @iboosts
  end
  
  #--------------------------------------------------------------------------
  # goldboostsflat 
  #--------------------------------------------------------------------------

  def goldboostsflat
    return @gfboosts if @gfboosts != nil
    @gfboosts = []
    self.note.split(/[\r\n]+/).each { |line|
      case line
      when /<(?:GOLD_FLAT_BONUS|gold flat bonus):[ ]*(\d+)([%％])>/i
          @gfboosts.push($1.to_i)
      end
    }
    return @gfboosts
  end
 
  #--------------------------------------------------------------------------
  # xpboostsflat 
  #--------------------------------------------------------------------------

  def xpboostsflat
    return @xfboosts if @xfboosts != nil
    @xfboosts = []
    self.note.split(/[\r\n]+/).each { |line|
      case line
      when /<(?:EXP_FLAT_BONUS|exp flat bonus|XP_FLAT_BONUS|xp flat bonus):[ ]*(\d+)([%％])>/i
          @xfboosts.push($1.to_i)
      end
    }
    return @xfboosts
  end

  #--------------------------------------------------------------------------
  # itemboostsflat 
  #--------------------------------------------------------------------------

  def itemboostsflat
    return @ifboosts if @ifboosts != nil
    @ifboosts = []
    self.note.split(/[\r\n]+/).each { |line|
      case line
      when /<(?:ITEM_DROP_BONUS|item drop bonus):[ ]*(\d+)([%％])>/i
          @ifboosts.push($1.to_i)
      end
    }
    return @ifboosts
  end
  
  #--------------------------------------------------------------------------
  # itembonusdrop
  #--------------------------------------------------------------------------

  def itembonusdrop
    return @ibdboost if @ibdboost != nil
    @ibdboost = []
    self.note.split(/[\r]+/).each { |line|
      case line
      when /<(?:ITEM_BONUS_DROP|item bonus drop):[ ]*([+-]?\d+)>/i
        @ibdboost.push($1.to_i)
      end
    }
    return @ibdboost
  end
  
  #--------------------------------------------------------------------------
  # weapondropbonus
  #--------------------------------------------------------------------------

  def weaponbonusdrop
    return @wbdboost if @wbdboost != nil
    @wbdboost = []
    self.note.split(/[\r]+/).each { |line|
      case line
      when /<(?:WEAPON_BONUS_DROP|weapon bonus drop):[ ]*([+-]?\d+)>/i
        @wbdboost.push($1.to_i)
      end
    }
    return @wbdboost
  end
  
  #--------------------------------------------------------------------------
  # armordropbonus
  #--------------------------------------------------------------------------

  def armorbonusdrop
    return @abdboost if @abdboost != nil
    @abdboost = []
    self.note.split(/[\r]+/).each { |line|
      case line
      when /<(?:ARMOR_BONUS_DROP|armor bonus drop):[ ]*([+-]?\d+)>/i
        @abdboost.push($1.to_i)
      end
    }
    return @abdboost
  end

 
end
 
#==============================================================================
# RPG::State
#==============================================================================
 
class RPG::State
 
  #--------------------------------------------------------------------------
  # goldboosts 
  #--------------------------------------------------------------------------

  def goldboosts
    return @gboosts if @gboosts != nil
    @gboosts = []
    self.note.split(/[\r\n]+/).each { |line|
      case line
      when /<(?:GOLD_BONUS|gold bonus):[ ]*(\d+)([%％])>/i
          @gboosts.push($1.to_i)
      end
    }
    return @gboosts
  end
 
  #--------------------------------------------------------------------------
  # xpboosts 
  #--------------------------------------------------------------------------

  def xpboosts
    return @xboosts if @xboosts != nil
    @xboosts = []
    self.note.split(/[\r\n]+/).each { |line|
      case line
      when /<(?:EXP_BONUS|exp bonus|XP_BONUS|xp bonus):[ ]*(\d+)([%％])>/i
          @xboosts.push($1.to_i)
      end
    }
    return @xboosts
  end

  #--------------------------------------------------------------------------
  # itemboosts 
  #--------------------------------------------------------------------------

  def itemboosts
    return @iboosts if @iboosts != nil
    @iboosts = []
    self.note.split(/[\r\n]+/).each { |line|
      case line
      when /<(?:ITEM_BONUS|item bonus|ITEM_BONUS|item bonus):[ ]*(\d+)([%％])>/i
          @iboosts.push($1.to_i)
      end
    }
    return @iboosts
  end
  
  #--------------------------------------------------------------------------
  # goldboostsflat 
  #--------------------------------------------------------------------------

  def goldboostsflat
    return @gfboosts if @gfboosts != nil
    @gfboosts = []
    self.note.split(/[\r\n]+/).each { |line|
      case line
      when /<(?:GOLD_FLAT_BONUS|gold flat bonus):[ ]*(\d+)([%％])>/i
          @gfboosts.push($1.to_i)
      end
    }
    return @gfboosts
  end
 
  #--------------------------------------------------------------------------
  # xpboostsflat 
  #--------------------------------------------------------------------------

  def xpboostsflat
    return @xfboosts if @xfboosts != nil
    @xfboosts = []
    self.note.split(/[\r\n]+/).each { |line|
      case line
      when /<(?:EXP_FLAT_BONUS|exp flat bonus|XP_FLAT_BONUS|xp flat bonus):[ ]*(\d+)([%％])>/i
          @xfboosts.push($1.to_i)
      end
    }
    return @xfboosts
  end

  #--------------------------------------------------------------------------
  # itemboostsflat 
  #--------------------------------------------------------------------------

  def itemboostsflat
    return @ifboosts if @ifboosts != nil
    @ifboosts = []
    self.note.split(/[\r\n]+/).each { |line|
      case line
      when /<(?:ITEM_FLAT_BONUS|item flat bonus|ITEM_FLAT_BONUS|item flat bonus):[ ]*(\d+)([%％])>/i
          @ifboosts.push($1.to_i)
      end
    }
    return @ifboosts
  end
  
  #--------------------------------------------------------------------------
  # itembonusdrop
  #--------------------------------------------------------------------------

  def itembonusdrop
    return @ibdboost if @ibdboost != nil
    @ibdboost = []
    self.note.split(/[\r]+/).each { |line|
      case line
      when /<(?:ITEM_BONUS_DROP|item bonus drop):[ ]*([+-]?\d+)>/i
        @ibdboost.push($1.to_i)
      end
    }
    return @ibdboost
  end
  
  #--------------------------------------------------------------------------
  # weapondropbonus
  #--------------------------------------------------------------------------

  def weaponbonusdrop
    return @wbdboost if @wbdboost != nil
    @wbdboost = []
    self.note.split(/[\r]+/).each { |line|
      case line
      when /<(?:WEAPON_BONUS_DROP|weapon bonus drop):[ ]*([+-]?\d+)>/i
        @wbdboost.push($1.to_i)
      end
    }
    return @wbdboost
  end
  
  #--------------------------------------------------------------------------
  # armordropbonus
  #--------------------------------------------------------------------------

  def armorbonusdrop
    return @abdboost if @abdboost != nil
    @abdboost = []
    self.note.split(/[\r]+/).each { |line|
      case line
      when /<(?:ARMOR_BONUS_DROP|armor bonus drop):[ ]*([+-]?\d+)>/i
        @abdboost.push($1.to_i)
      end
    }
    return @abdboost
  end

end
 
#==============================================================================
# Game_Party
#==============================================================================
 
class Game_Party
  
  #--------------------------------------------------------------------------
  # new method: party_gold_rate
  #--------------------------------------------------------------------------
  
  def party_gold_rate
    n = 100
    for actor in members
      g_rate = 100
      for equip in actor.equips.compact
        next if equip == nil
        e_g_rate = 100
        e_gf_rate = 0
        equip.goldboosts.each { |gb| e_g_rate = e_g_rate * gb / 100 unless gb == nil }
        equip.goldboostsflat.each { |gbf| e_gf_rate = e_gf_rate + (gbf - 100) unless gbf == nil }
        g_rate = g_rate * e_g_rate / 100
        g_rate = g_rate + e_gf_rate
      end
      for state in actor.states
        e_g_rate = 100
        e_gf_rate = 0
        state.goldboosts.each { |gb| e_g_rate = e_g_rate * gb / 100 unless gb == nil }
        state.goldboostsflat.each { |gbf| e_gf_rate = e_gf_rate + (gbf - 100) unless gbf == nil }
        g_rate = g_rate * e_g_rate / 100
        g_rate = g_rate + e_gf_rate
      end
      n = n * g_rate / 100 unless g_rate == 100
    end
    return 0 if n < 0
    return n
  end
  
  #--------------------------------------------------------------------------
  # new method: party_exp_rate
  #--------------------------------------------------------------------------
  
  def party_exp_rate
    n = 100
    for actor in members
      x_rate = 100
      for equip in actor.equips.compact
        next if equip == nil
        e_x_rate = 100
        e_xf_rate = 0
        equip.xpboosts.each { |xb| e_x_rate = e_x_rate * xb / 100 unless xb == nil }
        equip.xpboostsflat.each { |xbf| e_xf_rate = e_xf_rate + (xbf - 100) unless xbf == nil }
        x_rate = x_rate * e_x_rate / 100
        x_rate = x_rate + e_xf_rate
      end
      for state in actor.states
        e_x_rate = 100
        e_xf_rate = 0
        state.xpboosts.each { |xb| e_x_rate = e_x_rate * xb / 100 unless xb == nil }
        state.xpboostsflat.each { |xbf| e_xf_rate = e_x_rate + (xbf - 100) unless xbf == nil }
        x_rate = x_rate * e_x_rate / 100
        x_rate = x_rate + e_xf_rate
      end
      n = n * x_rate / 100 unless x_rate == 100
    end
    return 0 if n < 0
    return n
  end
  #--------------------------------------------------------------------------
  # new method: party_item_rate
  #--------------------------------------------------------------------------
  
  def party_item_rate
    n = 100
    for actor in members
      i_rate = 100
      for equip in actor.equips.compact
        next if equip == nil
        e_i_rate = 100
        e_if_rate = 0
        equip.itemboosts.each { |ib| e_i_rate = e_i_rate * ib / 100 unless ib == nil }
        equip.itemboostsflat.each { |ibf| e_if_rate = e_if_rate + (ibf - 100) unless ibf == nil }
        i_rate = i_rate * e_i_rate / 100
        i_rate = i_rate + e_if_rate
      end
      for state in actor.states
        e_i_rate = 100
        e_if_rate = 0
        state.itemboosts.each { |ib| e_i_rate = e_i_rate * ib / 100 unless ib == nil }
        state.itemboostsflat.each { |ibf| e_if_rate = e_if_rate + (ibf - 100) unless ibf == nil }
        i_rate = i_rate * e_i_rate / 100
        i_rate = i_rate + e_if_rate
      end
      n = n * i_rate / 100 unless i_rate == 100
    end
    return 0 if n < 0
    return n
  end
  
  #--------------------------------------------------------------------------
  # new method: party_itemdrop_rate
  #--------------------------------------------------------------------------
  
  def party_itemdrop_rate
    n = 1
    for actor in members
      for equip in actor.equips.compact
        next if equip == nil
        equip.itembonusdrop.each { |ib| n += ib unless ib == nil }
      end
      for state in actor.states
        state.itembonusdrop.each { |ib| n += ib unless ib == nil }
      end
    end
    return 0 if n < 0
    return n
  end
  
  #--------------------------------------------------------------------------
  # new method: party_weapondrop_rate
  #--------------------------------------------------------------------------
  
  def party_weapondrop_rate
    n = 1
    for actor in members
      for equip in actor.equips.compact
        next if equip == nil
        equip.weaponbonusdrop.each { |ib| n += ib unless ib == nil }
      end
      for state in actor.states
        state.weaponbonusdrop.each { |ib| n += ib unless ib == nil }
      end
    end
    return 0 if n < 0
    return n
  end
  
  #--------------------------------------------------------------------------
  # new method: party_armordrop_rate
  #--------------------------------------------------------------------------
  
  def party_armordrop_rate
    n = 1
    for actor in members
      for equip in actor.equips.compact
        next if equip == nil
        equip.armorbonusdrop.each { |ib| n += ib unless ib == nil }
      end
      for state in actor.states
        state.armorbonusdrop.each { |ib| n += ib unless ib == nil }
      end
    end
    return 0 if n < 0
    return n
  end
  
end
 
#==============================================================================
# Game_Enemy
#==============================================================================
 
class Game_Enemy < Game_Battler
  
  #--------------------------------------------------------------------------
  # alias: gold
  #--------------------------------------------------------------------------
  
  alias csa_gxpb_gold gold unless $@
  def gold
    n = csa_gxpb_gold
    n = n * $game_party.party_gold_rate / 100
    return Integer(n)
  end
  
  #--------------------------------------------------------------------------
  # alias: exp
  #--------------------------------------------------------------------------
  
  alias csa_gxpb_exp exp unless $@
  def exp
    n = csa_gxpb_exp
    n = n * $game_party.party_exp_rate / 100
    return Integer(n)
  end
  
  #--------------------------------------------------------------------------
  # overwrite: item
  #--------------------------------------------------------------------------
  def make_drop_items
    enemy.drop_items.inject([]) do |r, di|
      teamdrop = drop_item_rate
      teamdrop = teamdrop * ($game_party.party_item_rate / 100)
      if di.kind > 0 && rand * di.denominator < teamdrop
        r.push(item_object(di.kind, di.data_id))
      else
        r
      end
    end
  end
end

module Vocab
  ObtainItem      = "%s%s%s%s%s%s found!"
end

module BattleManager
  #--------------------------------------------------------------------------
  # * Dropped Item Acquisition and Display
  #--------------------------------------------------------------------------
  def self.gain_drop_items
    $game_troop.make_drop_items.each do |item|
      if item.is_a?(RPG::Item)
        gain = $game_party.party_itemdrop_rate
        color = 4
      elsif item.is_a?(RPG::Weapon)
        gain = $game_party.party_weapondrop_rate
        color = 7
      else
        gain = $game_party.party_armordrop_rate
        color = 11
      end
      $game_party.gain_item(item, gain)
      colorcodeA = "\\*\\c[#{color}]"
      colorcodeB = "\\*\\c[0]"
      gains = "#{gain}"
      icon = '\\*\\i[' + item.icon_index.to_s + ']'
      prefix = ""
      prefix = "s" if gain > 1
      $game_message.add(sprintf(Vocab::ObtainItem,colorcodeA,gains,icon,item.name,prefix,colorcodeB))
    end
    wait_for_message
  end
end
 
#===============================================================================
# 
# END OF FILE
# 
#===============================================================================
